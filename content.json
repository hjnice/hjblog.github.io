[{"title":"BeanUtils的使用","date":"2017-03-31T14:16:11.000Z","path":"2017/03/31/BeanUtils/","text":"程序中对javabean的操作很频繁， 所以apache提供了一套开源的api，方便对javabean的操作！即BeanUtils组件。BeanUtils组件， 作用是简化javabean的操作！可以从www.apache.org下载BeanUtils组件，然后再在项目中引入jar文件！使用BenUtils组件：引入commons-beanutils-1.8.3.jar核心包引入日志支持包: commons-logging-1.1.3.jar如果缺少日志jar文件，报错：12345java.lang.NoClassDefFoundError: org/apache/commons/logging/LogFactory at org.apache.commons.beanutils.ConvertUtilsBean.&lt;init&gt;(ConvertUtilsBean.java:157) at org.apache.commons.beanutils.BeanUtilsBean.&lt;init&gt;(BeanUtilsBean.java:117) at org.apache.commons.beanutils.BeanUtilsBean$1.initialValue(BeanUtilsBean.java:68) at二、实例, 基本用法方法1： 对象属性的拷贝12BeanUtils.copyProperty(admin, \"userName\", \"jack\");BeanUtils.setProperty(admin, \"age\", 18);方法2： 对象的拷贝1BeanUtils.copyProperties(newAdmin, admin);方法3： map数据拷贝到javabean中【注意：map中的key要与javabean的属性名称一致】1BeanUtils.populate(adminMap, map);12345678910111213141516171819202122232425262728293031//1. 对javabean的基本操作 @Test public void test1() throws Exception &#123; // a. 基本操作 Admin admin = new Admin(); //admin.setUserName(\"Jack\"); //admin.setPwd(\"999\"); // b. BeanUtils组件实现对象属性的拷贝 BeanUtils.copyProperty(admin, \"userName\", \"jack\"); BeanUtils.setProperty(admin, \"age\", 18); // 总结1： 对于基本数据类型，会自动进行类型转换! // c. 对象的拷贝 Admin newAdmin = new Admin(); BeanUtils.copyProperties(newAdmin, admin); // d. map数据，拷贝到对象中 Admin adminMap = new Admin(); Map&lt;String,Object&gt; map = new HashMap&lt;String,Object&gt;(); map.put(\"userName\", \"Jerry\"); map.put(\"age\", 29); // 注意：map中的key要与javabean的属性名称一致 BeanUtils.populate(adminMap, map); // 测试 System.out.println(adminMap.getUserName()); System.out.println(adminMap.getAge());三、实例, 日期类型的拷贝需要注册日期类型转换器，2种方式参见下面代码：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104public class App &#123; //1. 对javabean的基本操作 @Test public void test1() throws Exception &#123; // a. 基本操作 Admin admin = new Admin();// admin.setUserName(\"Jack\");// admin.setPwd(\"999\"); // b. BeanUtils组件实现对象属性的拷贝 BeanUtils.copyProperty(admin, \"userName\", \"jack\"); BeanUtils.setProperty(admin, \"age\", 18); // 总结1： 对于基本数据类型，会自动进行类型转换! // c. 对象的拷贝 Admin newAdmin = new Admin(); BeanUtils.copyProperties(newAdmin, admin); // d. map数据，拷贝到对象中 Admin adminMap = new Admin(); Map&lt;String,Object&gt; map = new HashMap&lt;String,Object&gt;(); map.put(\"userName\", \"Jerry\"); map.put(\"age\", 29); // 注意：map中的key要与javabean的属性名称一致 BeanUtils.populate(adminMap, map); // 测试 System.out.println(adminMap.getUserName()); System.out.println(adminMap.getAge()); &#125; //2. 自定义日期类型转换器 @Test public void test2() throws Exception &#123; // 模拟表单数据 String name = \"jack\"; String age = \"20\"; String birth = \" \"; // 对象 Admin admin = new Admin(); // 注册日期类型转换器：1， 自定义的方式 ConvertUtils.register(new Converter() &#123; // 转换的内部实现方法，需要重写 @Override public Object convert(Class type, Object value) &#123; // 判断 if (type != Date.class) &#123; return null; &#125; if (value == null || \"\".equals(value.toString().trim())) &#123; return null; &#125; try &#123; // 字符串转换为日期 SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd\"); return sdf.parse(value.toString()); &#125; catch (ParseException e) &#123; throw new RuntimeException(e); &#125; &#125; &#125;,Date.class); // 把表单提交的数据，封装到对象中 BeanUtils.copyProperty(admin, \"userName\", name); BeanUtils.copyProperty(admin, \"age\", age); BeanUtils.copyProperty(admin, \"birth\", birth); //------ 测试------ System.out.println(admin); &#125; //2. 使用提供的日期类型转换器工具类 @Test public void test3() throws Exception &#123; // 模拟表单数据 String name = \"jack\"; String age = \"20\"; String birth = null; // 对象 Admin admin = new Admin(); // 注册日期类型转换器：2， 使用组件提供的转换器工具类 ConvertUtils.register(new DateLocaleConverter(), Date.class); // 把表单提交的数据，封装到对象中 BeanUtils.copyProperty(admin, \"userName\", name); BeanUtils.copyProperty(admin, \"age\", age); BeanUtils.copyProperty(admin, \"birth\", birth); //------ 测试------ System.out.println(admin);四、应用123456789101112131415161718192021222324252627282930313233343536373839404142public class WebUtils &#123; @Deprecated public static &lt;T&gt; T copyToBean_old(HttpServletRequest request, Class&lt;T&gt; clazz) &#123; try &#123; // 创建对象 T t = clazz.newInstance(); // 获取所有的表单元素的名称 Enumeration&lt;String&gt; enums = request.getParameterNames(); // 遍历 while (enums.hasMoreElements()) &#123; // 获取表单元素的名称:&lt;input type=\"password\" name=\"pwd\"/&gt; String name = enums.nextElement(); // pwd // 获取名称对应的值 String value = request.getParameter(name); // 把指定属性名称对应的值进行拷贝 BeanUtils.copyProperty(t, name, value); &#125; return t; &#125; catch (Exception e) &#123; throw new RuntimeException(e); &#125; &#125; /** * 处理请求数据的封装 */ public static &lt;T&gt; T copyToBean(HttpServletRequest request, Class&lt;T&gt; clazz) &#123; try &#123; // （注册日期类型转换器） // 创建对象 T t = clazz.newInstance(); BeanUtils.populate(t, request.getParameterMap()); return t; &#125; catch (Exception e) &#123; throw new RuntimeException(e); &#125; &#125;&#125;","tags":[{"name":"database","slug":"database","permalink":"http://hujun.ga/tags/database/"},{"name":"BeanUtils","slug":"BeanUtils","permalink":"http://hujun.ga/tags/BeanUtils/"}]},{"title":"JDBC DBCP连接池的使用","date":"2017-03-29T06:27:05.000Z","path":"2017/03/29/java-jdbc-dbcp/","text":"连接池是创建和管理一个连接的缓冲池的技术，这些连接准备好被任何需要它们的线程使用。首先下载commons.dbcp.jar和commons.pool.jar文件123456789101112131415161718192021222324252627282930313233343536import java.awt.image.DataBuffer;import java.io.IOException;import java.io.InputStream;import java.sql.Connection;import java.sql.SQLException;import java.util.Properties;import javax.sql.DataSource;import org.apache.commons.dbcp.BasicDataSourceFactory;public class DBCPUtils &#123; private static DataSource ds ; static &#123; //将配置文件加载进来 InputStream in = DBCPUtils.class.getClassLoader().getResourceAsStream(\"dbcpconfig.properties\") ; Properties props = new Properties() ; try &#123; props.load(in) ; ds = BasicDataSourceFactory.createDataSource(props) ; &#125; catch (Exception e) &#123; throw new RuntimeException(\"服务器忙\") ; &#125; &#125; //提供获取练级的方法 public static Connection getConnection()&#123; try &#123; return ds.getConnection() ; &#125; catch (SQLException e) &#123; throw new RuntimeException(\"服务器忙\") ; &#125; &#125;&#125;dbcpconfig.properties配置文件123456789101112131415161718192021222324252627282930313233343536#连接设置driverClassName=com.mysql.jdbc.Driverurl=jdbc:mysql://localhost:3306/testusername=rootpassword=root#&lt;!-- 初始化连接 --&gt;initialSize=10#最大连接数量maxActive=50#&lt;!-- 最大空闲连接 --&gt;maxIdle=20#&lt;!-- 最小空闲连接 --&gt;minIdle=5#&lt;!-- 超时等待时间以毫秒为单位 6000毫秒/1000等于60秒 --&gt;maxWait=60000#JDBC驱动建立连接时附带的连接属性属性的格式必须为这样：[属性名=property;] #注意：\"user\" 与 \"password\" 两个属性会被明确地传递，因此这里不需要包含他们。connectionProperties=useUnicode=true;characterEncoding=gbk#指定由连接池所创建的连接的自动提交（auto-commit）状态。defaultAutoCommit=true#driver default 指定由连接池所创建的连接的只读（read-only）状态。#如果没有设置该值，则“setReadOnly”方法将不被调用。（某些驱动并不支持只读模式，如：Informix）defaultReadOnly=false#driver default 指定由连接池所创建的连接的事务级别（TransactionIsolation）。#可用值为下列之一：（详情可见javadoc。）NONE,READ_UNCOMMITTED, READ_COMMITTED, REPEATABLE_READ, SERIALIZABLEdefaultTransactionIsolation=READ_UNCOMMITTED","tags":[{"name":"database","slug":"database","permalink":"http://hujun.ga/tags/database/"},{"name":"java","slug":"java","permalink":"http://hujun.ga/tags/java/"},{"name":"jdbc","slug":"jdbc","permalink":"http://hujun.ga/tags/jdbc/"},{"name":"dbcp","slug":"dbcp","permalink":"http://hujun.ga/tags/dbcp/"}]},{"title":"mysql基本常用语句","date":"2017-03-25T05:52:43.000Z","path":"2017/03/25/mysql-Statement/","text":"SQL：Structured Query Language 是结构化查询语言，常用的数据库有Oracle、DB2、MySQL、SQL Server数据库的操作创建数据库1create database mydb ;查看创建数据库的语句1show create database mydb ;切换到当前的数据库1use mydb ;删除数据库1drop database mydb ;查看所有的数据库1show databases ;修改数据库mydb1的字符集为utf81alter database mydb1 character set utf8 ;针对表的操作创建表t1234create table t( id int , name varchar(30)) ;查看创建表的源码show create table t ; 创建表t1,使用字符集gbk1234create table t1( id int , name varchar(30))character set gbk ;设置客户端的字符集为gbk1set character_set_client=gbk;设置结果集的字符集为gbk1set character_set_results=gbk ;插入数据1insert into t4(id,name) values(1,'name1') ;1insert t4(id,name) values(2,'name2') ;省略字段，意味着所有的字段都必须给值(自增例外)1insert t4 values(3,'name3','2014-4-3') ;更新将表t4的第三条记录姓名字段改为name41update t4 set name='name4' where id = 3 ;将所有记录的名字都改为东方不败1update t4 set name = 'name5' ;修改多个字段1update t4 set id=6,name='name6' where id = 2 ;删除1delete from t4 where id = 4 ;删除所有的记录1delete from t4 ;删除所有的记录1truncate table t4 ;","tags":[{"name":"database","slug":"database","permalink":"http://hujun.ga/tags/database/"},{"name":"mysql","slug":"mysql","permalink":"http://hujun.ga/tags/mysql/"}]},{"title":"MySql5.7安装图解","date":"2017-03-22T06:37:35.000Z","path":"2017/03/22/mysql-install/","text":"MySQL 5.7 版本的安装及简单使用（图文教程）第一步，下载MySql到MySql的官网点击Downloads–&gt;Community–&gt;MySQL on Windows–&gt;MySQL Installer下载MySql安装包，然后双击安装第二步，安装及简单配置直接点击next下一步next下面就要输入默认用户root的密码了这里我直接输入root，显示weak,是密码弱，不用管，next默认next这是端口，不用改，默认，next直接点Execute输入刚刚设置的root用户的密码点击Check,继续nextExecuteFinish,安装完成###验证登录打开MySql Workbench点击Local instance MySql57灰色的方框, 输入密码,OK也可以使用命令行来登录先配置MySql的环境变量我的电脑〉属性〉高级系统设置〉环境变量〉找到PATH在PATH的后面加上;然后打开MySql安装目录，我的是D:\\Program Files\\MySQL\\MySQL Utilities 1.6\\;D:\\Program Files\\MySQL\\MySQL Server 5.7\\bin加在;后面打开cmd,输入mysql -uroot -proot,-u后面是用户名，-p后面是密码回车点击计算机〉管理〉服务可以看到MySql服务已经启动了，可以直接点停止或启动也可以通过命令行来停止、启动输入net stop MySql57回车停止服务输入net start MySql57回车启动服务","tags":[{"name":"database","slug":"database","permalink":"http://hujun.ga/tags/database/"},{"name":"mysql","slug":"mysql","permalink":"http://hujun.ga/tags/mysql/"}]}]